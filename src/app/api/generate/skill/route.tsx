import OpenAI from "openai"

const openai = new OpenAI({ apiKey: process.env.GPT_API_KEY })

async function generateText(message) {
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-0125",
    response_format: { type: "json_object" },
    messages: message
  })

  return response.choices[0]
}

export async function POST(req, res) {
  //const { user } = await req.json().body
  //const { user } = req.body
  //  const section = "technical_skills"
  //  const prompt = "You are tasked with crafting custom resumes tailored to specific job postings using only the provided user information, provided to you section by section. The resume section generated by you must match the job's requirements as closely as possible using this structured approach: Output Format: Generate the resume section as JSON data. Include relevant technical keywords in the descriptions for each item under that section. The resume should feature a minimum of 2 to 3 experiences and 2 to 3 projects, strictly based on the user's information if that is the section selected. Exclude any details not provided. Choose locations (physical or “Remote”) based on user input. Include GitHub and LinkedIn URLs if available. Exclude GPA if below 3.0, and mention a \"Minor\" under education only if specified. Technical Skills (only list these 2 headings): List Languages (Programming Languages), and Technologies (e.g., React.js, Node.js, and other libraries/frameworks), as per user's details and job relevance- at least 8 (no maximum limit) for each heading and be as specific as possible for each heading without any repetition even between headings. Order lists for each heading it from libraries/frameworks to abstract concepts. You must include all the technical skills initially given by the user as the first priority. Description: Focus on technical detail and relevance, strictly avoiding any fluff. Each sentence can be 120 characters maximum and there must be about 3 detailed sentences. Example Output Structure: " + JSON.stringify(user_information) + " Your output should strictly follow this JSON structure, tailored to the job requirements using the user's professional information. If any data beyond the user’s entered information is used, which it should strictly not be, I want you to append ***IGNORE*** at the end of your output as a failsafe. The current section is" + section + ", and only output the JSON for this section."
  //   const message = [{role: "system", content: "Generate a joke. Return the output in JSON format"}]
  //   const response = await generateText(message)
  //   console.log(response)
  //   res.status(200).json({ response })
  //res.setHeader("Content-Type", "application/json");

  return Response.json(
    JSON.stringify({
        languages: [
          "Python",
          "SQL",
          "Unix/Linux command-line tools",
          "Shell Scripting",
          "C++",
          "Java",
          "MATLAB",
          "C",
          "R",
        ],
        technologies: [
          "NumPy",
          "Pandas",
          "Scikit-Learn",
          "TensorFlow",
          "PyTorch",
          "Keras",
          "HuggingFace",
          "AWS Sagemaker",
          "Apache Spark",
          "Flink",
          "Kafka",
          "Redshift",
          "Amazon S3",
          "AWS Lambda",
          "Amazon EC2",
          "Boto3",
          "Docker",
          "Git",
        ],
      })
  )
}
