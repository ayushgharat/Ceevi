import OpenAI from "openai"

const openai = new OpenAI({ apiKey: process.env.GPT_API_KEY })

async function generateText(message) {
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-0125",
    response_format: { type: "json_object" },
    messages: message
  })

  return response.choices[0]
}

export async function POST(req, res) {
  //const { user } = await req.json().body
  //const { user } = req.body
  //  const section = "technical_skills"
  //  const prompt = "You are tasked with crafting custom resumes tailored to specific job postings using only the provided user information, provided to you section by section. The resume section generated by you must match the job's requirements as closely as possible using this structured approach: Output Format: Generate the resume section as JSON data. Include relevant technical keywords in the descriptions for each item under that section. The resume should feature a minimum of 2 to 3 experiences and 2 to 3 projects, strictly based on the user's information if that is the section selected. Exclude any details not provided. Choose locations (physical or “Remote”) based on user input. Include GitHub and LinkedIn URLs if available. Exclude GPA if below 3.0, and mention a \"Minor\" under education only if specified. Technical Skills (only list these 2 headings): List Languages (Programming Languages), and Technologies (e.g., React.js, Node.js, and other libraries/frameworks), as per user's details and job relevance- at least 8 (no maximum limit) for each heading and be as specific as possible for each heading without any repetition even between headings. Order lists for each heading it from libraries/frameworks to abstract concepts. You must include all the technical skills initially given by the user as the first priority. Description: Focus on technical detail and relevance, strictly avoiding any fluff. Each sentence can be 120 characters maximum and there must be about 3 detailed sentences. Example Output Structure: " + JSON.stringify(user_information) + " Your output should strictly follow this JSON structure, tailored to the job requirements using the user's professional information. If any data beyond the user’s entered information is used, which it should strictly not be, I want you to append ***IGNORE*** at the end of your output as a failsafe. The current section is" + section + ", and only output the JSON for this section."
  //   const message = [{role: "system", content: "Generate a joke. Return the output in JSON format"}]
  //   const response = await generateText(message)
  //   console.log(response)
  //   res.status(200).json({ response })
  //res.setHeader("Content-Type", "application/json");

  return Response.json(
    JSON.stringify({
      experience: [
        {
          Company_Name: "KFin Technologies Ltd.",
          Location: "Mumbai, Maharashtra, India",
          Position_Title: "Software Engineer Intern",
          Start_Date: "May 2023",
          End_Date: "Present",
          Description:
            "Implemented Google Cloud OAuth 2.0 server on AWS ECS for ML life cycle management. Analyzed security flaws in Basic HTTP Auth, deployed platform versions via Terraform stacks on AWS (S3, RDS, Route 53, Secrets Manager). Developed Python scripts for tracking Mutual Fund Scheme data using Selenium, BeautifulSoup, Pandas, AWS Athena. Utilized NLTK, spaCy, Scikit-Learn for custom Vector Comparison method. Scheduled AWS Lambda Functions to query AMFI data and alert anomalies to project teams via SNS."
        },
        {
          Company_Name: "Carnegie Mellon University",
          Location: "Pennsylvania, United States (Remote)",
          Position_Title: "Machine Learning Research Intern",
          Start_Date: "Aug 2021",
          End_Date: "Jan 2022",
          Description:
            "Conceptualized mobile system for 3D face reconstruction. Trained GAN in PyTorch using Scikit-Learn, Numpy, OpenCV. Extracted 68 facial landmarks with DLib mapping onto 3D FLAME model with SciPy, PyMesh, Matplotlib."
        },
        {
          Company_Name: "Talerang",
          Location: "Mumbai, Maharashtra, India",
          Position_Title: "Software Engineer Intern",
          Start_Date: "Aug 2020",
          End_Date: "Dec 2020",
          Description:
            "Developed Corporate Portal for Talerang using JavaScript, HTML, CSS, PHP, SQL. Architected Real-Time Video Translation Tool in Python with AWS Translate for NLP."
        }
      ]
    })
  )
}
