import OpenAI from "openai"

const openai = new OpenAI({ apiKey: process.env.GPT_API_KEY })

async function generateText(message) {
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-0125",
    response_format: { type: "json_object" },
    messages: message
  })

  return response.choices[0]
}

export async function POST(req, res) {
  //const { user } = await req.json().body
  //const { user } = req.body
  //  const section = "technical_skills"
  //  const prompt = "You are tasked with crafting custom resumes tailored to specific job postings using only the provided user information, provided to you section by section. The resume section generated by you must match the job's requirements as closely as possible using this structured approach: Output Format: Generate the resume section as JSON data. Include relevant technical keywords in the descriptions for each item under that section. The resume should feature a minimum of 2 to 3 experiences and 2 to 3 projects, strictly based on the user's information if that is the section selected. Exclude any details not provided. Choose locations (physical or “Remote”) based on user input. Include GitHub and LinkedIn URLs if available. Exclude GPA if below 3.0, and mention a \"Minor\" under education only if specified. Technical Skills (only list these 2 headings): List Languages (Programming Languages), and Technologies (e.g., React.js, Node.js, and other libraries/frameworks), as per user's details and job relevance- at least 8 (no maximum limit) for each heading and be as specific as possible for each heading without any repetition even between headings. Order lists for each heading it from libraries/frameworks to abstract concepts. You must include all the technical skills initially given by the user as the first priority. Description: Focus on technical detail and relevance, strictly avoiding any fluff. Each sentence can be 120 characters maximum and there must be about 3 detailed sentences. Example Output Structure: " + JSON.stringify(user_information) + " Your output should strictly follow this JSON structure, tailored to the job requirements using the user's professional information. If any data beyond the user’s entered information is used, which it should strictly not be, I want you to append ***IGNORE*** at the end of your output as a failsafe. The current section is" + section + ", and only output the JSON for this section."
  //   const message = [{role: "system", content: "Generate a joke. Return the output in JSON format"}]
  //   const response = await generateText(message)
  //   console.log(response)
  //   res.status(200).json({ response })
  //res.setHeader("Content-Type", "application/json");

  return Response.json(
    JSON.stringify({
      projects: [
        {
          Name: "Partnr- Consulting Co-Pilot",
          Technologies: [
            "Python",
            "ReactJS",
            "LangChain",
            "Custom GPT-4",
            "Flask",
            "OpenAI API",
            "Whisper v3",
            "Google Flan-T5",
            "LlamaIndex",
          ],
          Project_Date: "November 2023 - Present",
          Description:
            "Developed a Generative AI driven ReactJS App to centralize client interactions (meetings, emails) aiding consultants. Trained GPT-4 for Q&A using GMail, Zoom, and OpenAI API data with LangChain and LlamaIndex for data selection. Used Whisper v3 for meeting transcription, Google Flan-T5 for real-time summarization, and Flask for server requests.",
          Achievements:
            "Winner: AI ATL (Largest AI Hackathon in ATL), CREATE-X Accelerator",
        },
        {
          Name: "RosterMD- Medical Burnout Tracker",
          Technologies: [
            "ReactJS",
            "Flask",
            "Logistic Regression",
            "GEN Burnout Dataset",
            "DEAP",
            "BERT",
            "CMU MOSI",
            "COVAREP",
            "Librosa",
            "AWS Transcribe",
          ],
          Project_Date: "February 2023 - Present",
          Description:
            "Developed a ReactJS App to estimate medical burnout from audio, automating shift scheduling for doctor satisfaction. Created Flask APIs for Logistic Regression on the QUAN Burnout Dataset and Genetic Scheduling via DEAP. Trained BERT on CMU MOSI for audio-weighted text sentiment analysis (84.5% Accuracy), using COVAREP and Librosa for acoustic extraction, alongside AWS Transcribe.",
          Achievements:
            "Winner: Hacklytics '23 (GT), Top 5 Startup Pitches: Summit ATL, Selected: CREATE-X Accelerator",
        },
        {
          Name: "Beyond Vision- AR White Cane Training",
          Technologies: [
            "Unity3D",
            "Java (Android)",
            "TensorFlow",
            "OpenCV",
            "Scikit-Image",
            "Google Cloud API",
            "RL Agents",
          ],
          Project_Date: "August 2020 - June 2022",
          Description:
            "Created Unity3D Application and prototyped Haptic Feedback Glove to train audio-motor skills of the visually-impaired. Trained TensorFlow RL Agents, Motion Detection with OpenCV, Scikit-Image, Speech Recognition with Google Cloud. Funded by Aditya Jyot Eye Hospital to reach 20,000+. Publication: tinyurl.com/msrharrx, Patent Pending.",
        },
      ],
    })
  );
}
